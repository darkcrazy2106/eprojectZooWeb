var mod_pagespeed_N4xUV4PKvj = "/**\n * jQuery CSS Customizable Scrollbar\n *\n * Copyright 2015, Yuriy Khabarov\n * Dual licensed under the MIT or GPL Version 2 licenses.\n *\n * If you found bug, please contact me via email <13real008@gmail.com>\n *\n * @author Yuriy Khabarov aka Gromo\n * @version 0.2.10\n * @url https://github.com/gromo/jquery.scrollbar/\n *\n */\n;\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else {\n        factory(root.jQuery);\n    }\n}(this, function ($) {\n    'use strict';\n\n    // init flags & variables\n    var debug = false;\n\n    var browser = {\n        data: {\n            index: 0,\n            name: 'scrollbar'\n        },\n        macosx: /mac/i.test(navigator.platform),\n        mobile: /android|webos|iphone|ipad|ipod|blackberry/i.test(navigator.userAgent),\n        overlay: null,\n        scroll: null,\n        scrolls: [],\n        webkit: /webkit/i.test(navigator.userAgent) && !/edge\\/\\d+/i.test(navigator.userAgent)\n    };\n\n    browser.scrolls.add = function (instance) {\n        this.remove(instance).push(instance);\n    };\n    browser.scrolls.remove = function (instance) {\n        while ($.inArray(instance, this) >= 0) {\n            this.splice($.inArray(instance, this), 1);\n        }\n        return this;\n    };\n\n    var defaults = {\n        \"autoScrollSize\": true,     // automatically calculate scrollsize\n        \"autoUpdate\": true,         // update scrollbar if content/container size changed\n        \"debug\": false,             // debug mode\n        \"disableBodyScroll\": false, // disable body scroll if mouse over container\n        \"duration\": 200,            // scroll animate duration in ms\n        \"ignoreMobile\": false,      // ignore mobile devices\n        \"ignoreOverlay\": false,     // ignore browsers with overlay scrollbars (mobile, MacOS)\n        \"scrollStep\": 30,           // scroll step for scrollbar arrows\n        \"showArrows\": false,        // add class to show arrows\n        \"stepScrolling\": true,      // when scrolling to scrollbar mousedown position\n\n        \"scrollx\": null,            // horizontal scroll element\n        \"scrolly\": null,            // vertical scroll element\n\n        \"onDestroy\": null,          // callback function on destroy,\n        \"onInit\": null,             // callback function on first initialization\n        \"onScroll\": null,           // callback function on content scrolling\n        \"onUpdate\": null            // callback function on init/resize (before scrollbar size calculation)\n    };\n\n\n    var BaseScrollbar = function (container) {\n\n        if (!browser.scroll) {\n            browser.overlay = isScrollOverlaysContent();\n            browser.scroll = getBrowserScrollSize();\n            updateScrollbars();\n\n            $(window).resize(function () {\n                var forceUpdate = false;\n                if (browser.scroll && (browser.scroll.height || browser.scroll.width)) {\n                    var scroll = getBrowserScrollSize();\n                    if (scroll.height !== browser.scroll.height || scroll.width !== browser.scroll.width) {\n                        browser.scroll = scroll;\n                        forceUpdate = true; // handle page zoom\n                    }\n                }\n                updateScrollbars(forceUpdate);\n            });\n        }\n\n        this.container = container;\n        this.namespace = '.scrollbar_' + browser.data.index++;\n        this.options = $.extend({}, defaults, window.jQueryScrollbarOptions || {});\n        this.scrollTo = null;\n        this.scrollx = {};\n        this.scrolly = {};\n\n        container.data(browser.data.name, this);\n        browser.scrolls.add(this);\n    };\n\n    BaseScrollbar.prototype = {\n\n        destroy: function () {\n\n            if (!this.wrapper) {\n                return;\n            }\n\n            this.container.removeData(browser.data.name);\n            browser.scrolls.remove(this);\n\n            // init variables\n            var scrollLeft = this.container.scrollLeft();\n            var scrollTop = this.container.scrollTop();\n\n            this.container.insertBefore(this.wrapper).css({\n                \"height\": \"\",\n                \"margin\": \"\",\n                \"max-height\": \"\"\n            })\n                .removeClass('scroll-content scroll-scrollx_visible scroll-scrolly_visible')\n                .off(this.namespace)\n                .scrollLeft(scrollLeft)\n                .scrollTop(scrollTop);\n\n            this.scrollx.scroll.removeClass('scroll-scrollx_visible').find('div').andSelf().off(this.namespace);\n            this.scrolly.scroll.removeClass('scroll-scrolly_visible').find('div').andSelf().off(this.namespace);\n\n            this.wrapper.remove();\n\n            $(document).add('body').off(this.namespace);\n\n            if ($.isFunction(this.options.onDestroy)){\n                this.options.onDestroy.apply(this, [this.container]);\n            }\n        },\n        init: function (options) {\n\n            // init variables\n            var S = this,\n                c = this.container,\n                cw = this.containerWrapper || c,\n                namespace = this.namespace,\n                o = $.extend(this.options, options || {}),\n                s = {x: this.scrollx, y: this.scrolly},\n                w = this.wrapper;\n\n            var initScroll = {\n                \"scrollLeft\": c.scrollLeft(),\n                \"scrollTop\": c.scrollTop()\n            };\n\n            // do not init if in ignorable browser\n            if ((browser.mobile && o.ignoreMobile)\n                || (browser.overlay && o.ignoreOverlay)\n                || (browser.macosx && !browser.webkit) // still required to ignore nonWebKit browsers on Mac\n                ) {\n                return false;\n            }\n\n            // init scroll container\n            if (!w) {\n                this.wrapper = w = $('<div>').addClass('scroll-wrapper').addClass(c.attr('class'))\n                    .css('position', c.css('position') == 'absolute' ? 'absolute' : 'relative')\n                    .insertBefore(c).append(c);\n\n                if (c.is('textarea')) {\n                    this.containerWrapper = cw = $('<div>').insertBefore(c).append(c);\n                    w.addClass('scroll-textarea');\n                }\n\n                cw.addClass('scroll-content').css({\n                    \"height\": \"auto\",\n                    \"margin-bottom\": browser.scroll.height * -1 + 'px',\n                    \"margin-right\": browser.scroll.width * -1 + 'px',\n                    \"max-height\": \"\"\n                });\n\n                c.on('scroll' + namespace, function (event) {\n                    if ($.isFunction(o.onScroll)) {\n                        o.onScroll.call(S, {\n                            \"maxScroll\": s.y.maxScrollOffset,\n                            \"scroll\": c.scrollTop(),\n                            \"size\": s.y.size,\n                            \"visible\": s.y.visible\n                        }, {\n                            \"maxScroll\": s.x.maxScrollOffset,\n                            \"scroll\": c.scrollLeft(),\n                            \"size\": s.x.size,\n                            \"visible\": s.x.visible\n                        });\n                    }\n                    s.x.isVisible && s.x.scroll.bar.css('left', c.scrollLeft() * s.x.kx + 'px');\n                    s.y.isVisible && s.y.scroll.bar.css('top', c.scrollTop() * s.y.kx + 'px');\n                });\n\n                /* prevent native scrollbars to be visible on #anchor click */\n                w.on('scroll' + namespace, function () {\n                    w.scrollTop(0).scrollLeft(0);\n                });\n\n                if (o.disableBodyScroll) {\n                    var handleMouseScroll = function (event) {\n                        isVerticalScroll(event) ?\n                            s.y.isVisible && s.y.mousewheel(event) :\n                            s.x.isVisible && s.x.mousewheel(event);\n                    };\n                    w.on('MozMousePixelScroll' + namespace, handleMouseScroll);\n                    w.on('mousewheel' + namespace, handleMouseScroll);\n\n                    if (browser.mobile) {\n                        w.on('touchstart' + namespace, function (event) {\n                            var touch = event.originalEvent.touches && event.originalEvent.touches[0] || event;\n                            var originalTouch = {\n                                \"pageX\": touch.pageX,\n                                \"pageY\": touch.pageY\n                            };\n                            var originalScroll = {\n                                \"left\": c.scrollLeft(),\n                                \"top\": c.scrollTop()\n                            };\n                            $(document).on('touchmove' + namespace, function (event) {\n                                var touch = event.originalEvent.targetTouches && event.originalEvent.targetTouches[0] || event;\n                                c.scrollLeft(originalScroll.left + originalTouch.pageX - touch.pageX);\n                                c.scrollTop(originalScroll.top + originalTouch.pageY - touch.pageY);\n                                event.preventDefault();\n                            });\n                            $(document).on('touchend' + namespace, function () {\n                                $(document).off(namespace);\n                            });\n                        });\n                    }\n                }\n                if ($.isFunction(o.onInit)){\n                    o.onInit.apply(this, [c]);\n                }\n            } else {\n                cw.css({\n                    \"height\": \"auto\",\n                    \"margin-bottom\": browser.scroll.height * -1 + 'px',\n                    \"margin-right\": browser.scroll.width * -1 + 'px',\n                    \"max-height\": \"\"\n                });\n            }\n\n            // init scrollbars & recalculate sizes\n            $.each(s, function (d, scrollx) {\n\n                var scrollCallback = null;\n                var scrollForward = 1;\n                var scrollOffset = (d === 'x') ? 'scrollLeft' : 'scrollTop';\n                var scrollStep = o.scrollStep;\n                var scrollTo = function () {\n                    var currentOffset = c[scrollOffset]();\n                    c[scrollOffset](currentOffset + scrollStep);\n                    if (scrollForward == 1 && (currentOffset + scrollStep) >= scrollToValue)\n                        currentOffset = c[scrollOffset]();\n                    if (scrollForward == -1 && (currentOffset + scrollStep) <= scrollToValue)\n                        currentOffset = c[scrollOffset]();\n                    if (c[scrollOffset]() == currentOffset && scrollCallback) {\n                        scrollCallback();\n                    }\n                }\n                var scrollToValue = 0;\n\n                if (!scrollx.scroll) {\n\n                    scrollx.scroll = S._getScroll(o['scroll' + d]).addClass('scroll-' + d);\n\n                    if(o.showArrows){\n                        scrollx.scroll.addClass('scroll-element_arrows_visible');\n                    }\n\n                    scrollx.mousewheel = function (event) {\n\n                        if (!scrollx.isVisible || (d === 'x' && isVerticalScroll(event))) {\n                            return true;\n                        }\n                        if (d === 'y' && !isVerticalScroll(event)) {\n                            s.x.mousewheel(event);\n                            return true;\n                        }\n\n                        var delta = event.originalEvent.wheelDelta * -1 || event.originalEvent.detail;\n                        var maxScrollValue = scrollx.size - scrollx.visible - scrollx.offset;\n\n                        if ((delta > 0 && scrollToValue < maxScrollValue) || (delta < 0 && scrollToValue > 0)) {\n                            scrollToValue = scrollToValue + delta;\n                            if (scrollToValue < 0)\n                                scrollToValue = 0;\n                            if (scrollToValue > maxScrollValue)\n                                scrollToValue = maxScrollValue;\n\n                            S.scrollTo = S.scrollTo || {};\n                            S.scrollTo[scrollOffset] = scrollToValue;\n                            setTimeout(function () {\n                                if (S.scrollTo) {\n                                    c.stop().animate(S.scrollTo, 240, 'linear', function () {\n                                        scrollToValue = c[scrollOffset]();\n                                    });\n                                    S.scrollTo = null;\n                                }\n                            }, 1);\n                        }\n\n                        event.preventDefault();\n                        return false;\n                    };\n\n                    scrollx.scroll\n                        .on('MozMousePixelScroll' + namespace, scrollx.mousewheel)\n                        .on('mousewheel' + namespace, scrollx.mousewheel)\n                        .on('mouseenter' + namespace, function () {\n                            scrollToValue = c[scrollOffset]();\n                        });\n\n                    // handle arrows & scroll inner mousedown event\n                    scrollx.scroll.find('.scroll-arrow, .scroll-element_track')\n                        .on('mousedown' + namespace, function (event) {\n\n                            if (event.which != 1) // lmb\n                                return true;\n\n                            scrollForward = 1;\n\n                            var data = {\n                                \"eventOffset\": event[(d === 'x') ? 'pageX' : 'pageY'],\n                                \"maxScrollValue\": scrollx.size - scrollx.visible - scrollx.offset,\n                                \"scrollbarOffset\": scrollx.scroll.bar.offset()[(d === 'x') ? 'left' : 'top'],\n                                \"scrollbarSize\": scrollx.scroll.bar[(d === 'x') ? 'outerWidth' : 'outerHeight']()\n                            };\n                            var timeout = 0, timer = 0;\n\n                            if ($(this).hasClass('scroll-arrow')) {\n                                scrollForward = $(this).hasClass(\"scroll-arrow_more\") ? 1 : -1;\n                                scrollStep = o.scrollStep * scrollForward;\n                                scrollToValue = scrollForward > 0 ? data.maxScrollValue : 0;\n                            } else {\n                                scrollForward = (data.eventOffset > (data.scrollbarOffset + data.scrollbarSize) ? 1\n                                    : (data.eventOffset < data.scrollbarOffset ? -1 : 0));\n                                scrollStep = Math.round(scrollx.visible * 0.75) * scrollForward;\n                                scrollToValue = (data.eventOffset - data.scrollbarOffset -\n                                    (o.stepScrolling ? (scrollForward == 1 ? data.scrollbarSize : 0)\n                                        : Math.round(data.scrollbarSize / 2)));\n                                scrollToValue = c[scrollOffset]() + (scrollToValue / scrollx.kx);\n                            }\n\n                            S.scrollTo = S.scrollTo || {};\n                            S.scrollTo[scrollOffset] = o.stepScrolling ? c[scrollOffset]() + scrollStep : scrollToValue;\n\n                            if (o.stepScrolling) {\n                                scrollCallback = function () {\n                                    scrollToValue = c[scrollOffset]();\n                                    clearInterval(timer);\n                                    clearTimeout(timeout);\n                                    timeout = 0;\n                                    timer = 0;\n                                };\n                                timeout = setTimeout(function () {\n                                    timer = setInterval(scrollTo, 40);\n                                }, o.duration + 100);\n                            }\n\n                            setTimeout(function () {\n                                if (S.scrollTo) {\n                                    c.animate(S.scrollTo, o.duration);\n                                    S.scrollTo = null;\n                                }\n                            }, 1);\n\n                            return S._handleMouseDown(scrollCallback, event);\n                        });\n\n                    // handle scrollbar drag'n'drop\n                    scrollx.scroll.bar.on('mousedown' + namespace, function (event) {\n\n                        if (event.which != 1) // lmb\n                            return true;\n\n                        var eventPosition = event[(d === 'x') ? 'pageX' : 'pageY'];\n                        var initOffset = c[scrollOffset]();\n\n                        scrollx.scroll.addClass('scroll-draggable');\n\n                        $(document).on('mousemove' + namespace, function (event) {\n                            var diff = parseInt((event[(d === 'x') ? 'pageX' : 'pageY'] - eventPosition) / scrollx.kx, 10);\n                            c[scrollOffset](initOffset + diff);\n                        });\n\n                        return S._handleMouseDown(function () {\n                            scrollx.scroll.removeClass('scroll-draggable');\n                            scrollToValue = c[scrollOffset]();\n                        }, event);\n                    });\n                }\n            });\n\n            // remove classes & reset applied styles\n            $.each(s, function (d, scrollx) {\n                var scrollClass = 'scroll-scroll' + d + '_visible';\n                var scrolly = (d == \"x\") ? s.y : s.x;\n\n                scrollx.scroll.removeClass(scrollClass);\n                scrolly.scroll.removeClass(scrollClass);\n                cw.removeClass(scrollClass);\n            });\n\n            // calculate init sizes\n            $.each(s, function (d, scrollx) {\n                $.extend(scrollx, (d == \"x\") ? {\n                    \"offset\": parseInt(c.css('left'), 10) || 0,\n                    \"size\": c.prop('scrollWidth'),\n                    \"visible\": w.width()\n                } : {\n                    \"offset\": parseInt(c.css('top'), 10) || 0,\n                    \"size\": c.prop('scrollHeight'),\n                    \"visible\": w.height()\n                });\n            });\n\n            // update scrollbar visibility/dimensions\n            this._updateScroll('x', this.scrollx);\n            this._updateScroll('y', this.scrolly);\n\n            if ($.isFunction(o.onUpdate)){\n                o.onUpdate.apply(this, [c]);\n            }\n\n            // calculate scroll size\n            $.each(s, function (d, scrollx) {\n\n                var cssOffset = (d === 'x') ? 'left' : 'top';\n                var cssFullSize = (d === 'x') ? 'outerWidth' : 'outerHeight';\n                var cssSize = (d === 'x') ? 'width' : 'height';\n                var offset = parseInt(c.css(cssOffset), 10) || 0;\n\n                var AreaSize = scrollx.size;\n                var AreaVisible = scrollx.visible + offset;\n\n                var scrollSize = scrollx.scroll.size[cssFullSize]() + (parseInt(scrollx.scroll.size.css(cssOffset), 10) || 0);\n\n                if (o.autoScrollSize) {\n                    scrollx.scrollbarSize = parseInt(scrollSize * AreaVisible / AreaSize, 10);\n                    scrollx.scroll.bar.css(cssSize, scrollx.scrollbarSize + 'px');\n                }\n\n                scrollx.scrollbarSize = scrollx.scroll.bar[cssFullSize]();\n                scrollx.kx = ((scrollSize - scrollx.scrollbarSize) / (AreaSize - AreaVisible)) || 1;\n                scrollx.maxScrollOffset = AreaSize - AreaVisible;\n            });\n\n            c.scrollLeft(initScroll.scrollLeft).scrollTop(initScroll.scrollTop).trigger('scroll');\n        },\n\n        /**\n         * Get scrollx/scrolly object\n         *\n         * @param {Mixed} scroll\n         * @returns {jQuery} scroll object\n         */\n        _getScroll: function (scroll) {\n            var types = {\n                advanced: [\n                    '<div class=\"scroll-element\">',\n                    '<div class=\"scroll-element_corner\"></div>',\n                    '<div class=\"scroll-arrow scroll-arrow_less\"></div>',\n                    '<div class=\"scroll-arrow scroll-arrow_more\"></div>',\n                    '<div class=\"scroll-element_outer\">',\n                    '<div class=\"scroll-element_size\"></div>', // required! used for scrollbar size calculation !\n                    '<div class=\"scroll-element_inner-wrapper\">',\n                    '<div class=\"scroll-element_inner scroll-element_track\">', // used for handling scrollbar click\n                    '<div class=\"scroll-element_inner-bottom\"></div>',\n                    '</div>',\n                    '</div>',\n                    '<div class=\"scroll-bar\">', // required\n                    '<div class=\"scroll-bar_body\">',\n                    '<div class=\"scroll-bar_body-inner\"></div>',\n                    '</div>',\n                    '<div class=\"scroll-bar_bottom\"></div>',\n                    '<div class=\"scroll-bar_center\"></div>',\n                    '</div>',\n                    '</div>',\n                    '</div>'\n                ].join(''),\n                simple: [\n                    '<div class=\"scroll-element\">',\n                    '<div class=\"scroll-element_outer\">',\n                    '<div class=\"scroll-element_size\"></div>', // required! used for scrollbar size calculation !\n                    '<div class=\"scroll-element_track\"></div>', // used for handling scrollbar click\n                    '<div class=\"scroll-bar\"></div>', // required\n                    '</div>',\n                    '</div>'\n                ].join('')\n            };\n            if (types[scroll]) {\n                scroll = types[scroll];\n            }\n            if (!scroll) {\n                scroll = types['simple'];\n            }\n            if (typeof (scroll) == 'string') {\n                scroll = $(scroll).appendTo(this.wrapper);\n            } else {\n                scroll = $(scroll);\n            }\n            $.extend(scroll, {\n                bar: scroll.find('.scroll-bar'),\n                size: scroll.find('.scroll-element_size'),\n                track: scroll.find('.scroll-element_track')\n            });\n            return scroll;\n        },\n\n        _handleMouseDown: function(callback, event) {\n\n            var namespace = this.namespace;\n\n            $(document).on('blur' + namespace, function () {\n                $(document).add('body').off(namespace);\n                callback && callback();\n            });\n            $(document).on('dragstart' + namespace, function (event) {\n                event.preventDefault();\n                return false;\n            });\n            $(document).on('mouseup' + namespace, function () {\n                $(document).add('body').off(namespace);\n                callback && callback();\n            });\n            $('body').on('selectstart' + namespace, function (event) {\n                event.preventDefault();\n                return false;\n            });\n\n            event && event.preventDefault();\n            return false;\n        },\n\n        _updateScroll: function (d, scrollx) {\n\n            var container = this.container,\n                containerWrapper = this.containerWrapper || container,\n                scrollClass = 'scroll-scroll' + d + '_visible',\n                scrolly = (d === 'x') ? this.scrolly : this.scrollx,\n                offset = parseInt(this.container.css((d === 'x') ? 'left' : 'top'), 10) || 0,\n                wrapper = this.wrapper;\n\n            var AreaSize = scrollx.size;\n            var AreaVisible = scrollx.visible + offset;\n\n            scrollx.isVisible = (AreaSize - AreaVisible) > 1; // bug in IE9/11 with 1px diff\n            if (scrollx.isVisible) {\n                scrollx.scroll.addClass(scrollClass);\n                scrolly.scroll.addClass(scrollClass);\n                containerWrapper.addClass(scrollClass);\n            } else {\n                scrollx.scroll.removeClass(scrollClass);\n                scrolly.scroll.removeClass(scrollClass);\n                containerWrapper.removeClass(scrollClass);\n            }\n\n            if (d === 'y') {\n                if(container.is('textarea') || AreaSize < AreaVisible){\n                    containerWrapper.css({\n                        \"height\": (AreaVisible + browser.scroll.height) + 'px',\n                        \"max-height\": \"none\"\n                    });\n                } else {\n                    containerWrapper.css({\n                        //\"height\": \"auto\", // do not reset height value: issue with height:100%!\n                        \"max-height\": (AreaVisible + browser.scroll.height) + 'px'\n                    });\n                }\n            }\n\n            if (scrollx.size != container.prop('scrollWidth')\n                || scrolly.size != container.prop('scrollHeight')\n                || scrollx.visible != wrapper.width()\n                || scrolly.visible != wrapper.height()\n                || scrollx.offset != (parseInt(container.css('left'), 10) || 0)\n                || scrolly.offset != (parseInt(container.css('top'), 10) || 0)\n                ) {\n                $.extend(this.scrollx, {\n                    \"offset\": parseInt(container.css('left'), 10) || 0,\n                    \"size\": container.prop('scrollWidth'),\n                    \"visible\": wrapper.width()\n                });\n                $.extend(this.scrolly, {\n                    \"offset\": parseInt(container.css('top'), 10) || 0,\n                    \"size\": this.container.prop('scrollHeight'),\n                    \"visible\": wrapper.height()\n                });\n                this._updateScroll(d === 'x' ? 'y' : 'x', scrolly);\n            }\n        }\n    };\n\n    var CustomScrollbar = BaseScrollbar;\n\n    /*\n     * Extend jQuery as plugin\n     *\n     * @param {Mixed} command to execute\n     * @param {Mixed} arguments as Array\n     * @return {jQuery}\n     */\n    $.fn.scrollbar = function (command, args) {\n        if (typeof command !== 'string') {\n            args = command;\n            command = 'init';\n        }\n        if (typeof args === 'undefined') {\n            args = [];\n        }\n        if (!$.isArray(args)) {\n            args = [args];\n        }\n        this.not('body, .scroll-wrapper').each(function () {\n            var element = $(this),\n                instance = element.data(browser.data.name);\n            if (instance || command === 'init') {\n                if (!instance) {\n                    instance = new CustomScrollbar(element);\n                }\n                if (instance[command]) {\n                    instance[command].apply(instance, args);\n                }\n            }\n        });\n        return this;\n    };\n\n    /**\n     * Connect default options to global object\n     */\n    $.fn.scrollbar.options = defaults;\n\n\n    /**\n     * Check if scroll content/container size is changed\n     */\n\n    var updateScrollbars = (function () {\n        var timer = 0,\n            timerCounter = 0;\n\n        return function (force) {\n            var i, container, options, scroll, wrapper, scrollx, scrolly;\n            for (i = 0; i < browser.scrolls.length; i++) {\n                scroll = browser.scrolls[i];\n                container = scroll.container;\n                options = scroll.options;\n                wrapper = scroll.wrapper;\n                scrollx = scroll.scrollx;\n                scrolly = scroll.scrolly;\n                if (force || (options.autoUpdate && wrapper && wrapper.is(':visible') &&\n                    (container.prop('scrollWidth') != scrollx.size || container.prop('scrollHeight') != scrolly.size || wrapper.width() != scrollx.visible || wrapper.height() != scrolly.visible))) {\n                    scroll.init();\n\n                    if (options.debug) {\n                        window.console && console.log({\n                            scrollHeight: container.prop('scrollHeight') + ':' + scroll.scrolly.size,\n                            scrollWidth: container.prop('scrollWidth') + ':' + scroll.scrollx.size,\n                            visibleHeight: wrapper.height() + ':' + scroll.scrolly.visible,\n                            visibleWidth: wrapper.width() + ':' + scroll.scrollx.visible\n                        }, true);\n                        timerCounter++;\n                    }\n                }\n            }\n            if (debug && timerCounter > 10) {\n                window.console && console.log('Scroll updates exceed 10');\n                updateScrollbars = function () {};\n            } else {\n                clearTimeout(timer);\n                timer = setTimeout(updateScrollbars, 300);\n            }\n        };\n    })();\n\n    /* ADDITIONAL FUNCTIONS */\n    /**\n     * Get native browser scrollbar size (height/width)\n     *\n     * @param {Boolean} actual size or CSS size, default - CSS size\n     * @returns {Object} with height, width\n     */\n    function getBrowserScrollSize(actualSize) {\n\n        if (browser.webkit && !actualSize) {\n            return {\n                \"height\": 0,\n                \"width\": 0\n            };\n        }\n\n        if (!browser.data.outer) {\n            var css = {\n                \"border\": \"none\",\n                \"box-sizing\": \"content-box\",\n                \"height\": \"200px\",\n                \"margin\": \"0\",\n                \"padding\": \"0\",\n                \"width\": \"200px\"\n            };\n            browser.data.inner = $(\"<div>\").css($.extend({}, css));\n            browser.data.outer = $(\"<div>\").css($.extend({\n                \"left\": \"-1000px\",\n                \"overflow\": \"scroll\",\n                \"position\": \"absolute\",\n                \"top\": \"-1000px\"\n            }, css)).append(browser.data.inner).appendTo(\"body\");\n        }\n\n        browser.data.outer.scrollLeft(1000).scrollTop(1000);\n\n        return {\n            \"height\": Math.ceil((browser.data.outer.offset().top - browser.data.inner.offset().top) || 0),\n            \"width\": Math.ceil((browser.data.outer.offset().left - browser.data.inner.offset().left) || 0)\n        };\n    }\n\n    /**\n     * Check if native browser scrollbars overlay content\n     *\n     * @returns {Boolean}\n     */\n    function isScrollOverlaysContent() {\n        var scrollSize = getBrowserScrollSize(true);\n        return !(scrollSize.height || scrollSize.width);\n    }\n\n    function isVerticalScroll(event) {\n        var e = event.originalEvent;\n        if (e.axis && e.axis === e.HORIZONTAL_AXIS)\n            return false;\n        if (e.wheelDeltaX)\n            return false;\n        return true;\n    }\n\n\n    /**\n     * Extend AngularJS as UI directive\n     * and expose a provider for override default config\n     *\n     */\n    if (window.angular) {\n        (function (angular) {\n            angular.module('jQueryScrollbar', [])\n                .provider('jQueryScrollbar', function () {\n                    var defaultOptions = defaults;\n                    return {\n                        setOptions: function (options) {\n                            angular.extend(defaultOptions, options);\n                        },\n                        $get: function () {\n                            return {\n                                options: angular.copy(defaultOptions)\n                            };\n                        }\n                    };\n                })\n                .directive('jqueryScrollbar', ['jQueryScrollbar', '$parse', function (jQueryScrollbar, $parse) {\n                    return {\n                        \"restrict\": \"AC\",\n                        \"link\": function (scope, element, attrs) {\n                            var model = $parse(attrs.jqueryScrollbar),\n                                options = model(scope);\n                            element.scrollbar(options || jQueryScrollbar.options)\n                                .on('$destroy', function () {\n                                    element.scrollbar('destroy');\n                                });\n                        }\n                    };\n                }]);\n        })(window.angular);\n    }\n}));";
var mod_pagespeed_YQJyph$rin = " AOS.init({\n 	duration: 800,\n 	easing: 'slide',\n 	once: false\n });\n\njQuery(document).ready(function($) {\n\n	\"use strict\";\n\n	\n\n	var siteMenuClone = function() {\n\n		$('.js-clone-nav').each(function() {\n			var $this = $(this);\n			$this.clone().attr('class', 'site-nav-wrap').appendTo('.site-mobile-menu-body');\n		});\n\n\n		setTimeout(function() {\n			\n			var counter = 0;\n      $('.site-mobile-menu .has-children').each(function(){\n        var $this = $(this);\n        \n        $this.prepend('<span class=\"arrow-collapse collapsed\">');\n\n        $this.find('.arrow-collapse').attr({\n          'data-toggle' : 'collapse',\n          'data-target' : '#collapseItem' + counter,\n        });\n\n        $this.find('> ul').attr({\n          'class' : 'collapse',\n          'id' : 'collapseItem' + counter,\n        });\n\n        counter++;\n\n      });\n\n    }, 1000);\n\n		$('body').on('click', '.arrow-collapse', function(e) {\n      var $this = $(this);\n      if ( $this.closest('li').find('.collapse').hasClass('show') ) {\n        $this.removeClass('active');\n      } else {\n        $this.addClass('active');\n      }\n      e.preventDefault();  \n      \n    });\n\n		$(window).resize(function() {\n			var $this = $(this),\n				w = $this.width();\n\n			if ( w > 768 ) {\n				if ( $('body').hasClass('offcanvas-menu') ) {\n					$('body').removeClass('offcanvas-menu');\n				}\n			}\n		})\n\n		$('body').on('click', '.js-menu-toggle', function(e) {\n			var $this = $(this);\n			e.preventDefault();\n\n			if ( $('body').hasClass('offcanvas-menu') ) {\n				$('body').removeClass('offcanvas-menu');\n				$this.removeClass('active');\n			} else {\n				$('body').addClass('offcanvas-menu');\n				$this.addClass('active');\n			}\n		}) \n\n		// click outisde offcanvas\n		$(document).mouseup(function(e) {\n	    var container = $(\".site-mobile-menu\");\n	    if (!container.is(e.target) && container.has(e.target).length === 0) {\n	      if ( $('body').hasClass('offcanvas-menu') ) {\n					$('body').removeClass('offcanvas-menu');\n				}\n	    }\n		});\n	}; \n	siteMenuClone();\n\n\n	var sitePlusMinus = function() {\n		$('.js-btn-minus').on('click', function(e){\n			e.preventDefault();\n			if ( $(this).closest('.input-group').find('.form-control').val() != 0  ) {\n				$(this).closest('.input-group').find('.form-control').val(parseInt($(this).closest('.input-group').find('.form-control').val()) - 1);\n			} else {\n				$(this).closest('.input-group').find('.form-control').val(parseInt(0));\n			}\n		});\n		$('.js-btn-plus').on('click', function(e){\n			e.preventDefault();\n			$(this).closest('.input-group').find('.form-control').val(parseInt($(this).closest('.input-group').find('.form-control').val()) + 1);\n		});\n	};\n	// sitePlusMinus();\n\n\n	var siteSliderRange = function() {\n    $( \"#slider-range\" ).slider({\n      range: true,\n      min: 0,\n      max: 500,\n      values: [ 75, 300 ],\n      slide: function( event, ui ) {\n        $( \"#amount\" ).val( \"$\" + ui.values[ 0 ] + \" - $\" + ui.values[ 1 ] );\n      }\n    });\n    $( \"#amount\" ).val( \"$\" + $( \"#slider-range\" ).slider( \"values\", 0 ) +\n      \" - $\" + $( \"#slider-range\" ).slider( \"values\", 1 ) );\n	};\n	// siteSliderRange();\n\n\n	var siteMagnificPopup = function() {\n		$('.image-popup').magnificPopup({\n	    type: 'image',\n	    closeOnContentClick: true,\n	    closeBtnInside: false,\n	    fixedContentPos: true,\n	    mainClass: 'mfp-no-margins mfp-with-zoom', // class to remove default margin from left and right side\n	     gallery: {\n	      enabled: true,\n	      navigateByImgClick: true,\n	      preload: [0,1] // Will preload 0 - before current, and 1 after the current image\n	    },\n	    image: {\n	      verticalFit: true\n	    },\n	    zoom: {\n	      enabled: true,\n	      duration: 300 // don't foget to change the duration also in CSS\n	    }\n	  });\n\n	  $('.popup-youtube, .popup-vimeo, .popup-gmaps').magnificPopup({\n	    disableOn: 700,\n	    type: 'iframe',\n	    mainClass: 'mfp-fade',\n	    removalDelay: 160,\n	    preloader: false,\n\n	    fixedContentPos: false\n	  });\n	};\n	siteMagnificPopup();\n\n\n	var siteCarousel = function () {\n		if ( $('.nonloop-block-13').length > 0 ) {\n			$('.nonloop-block-13').owlCarousel({\n		    center: false,\n		    items: 1,\n		    loop: true,\n				stagePadding: 0,\n		    margin: 0,\n		    autoplay: true,\n		    nav: true,\n				navText: ['<span class=\"icon-arrow_back\">', '<span class=\"icon-arrow_forward\">'],\n		    responsive:{\n	        600:{\n	        	margin: 0,\n	        	nav: true,\n	          items: 2\n	        },\n	        1000:{\n	        	margin: 0,\n	        	stagePadding: 0,\n	        	nav: true,\n	          items: 3\n	        },\n	        1200:{\n	        	margin: 0,\n	        	stagePadding: 0,\n	        	nav: true,\n	          items: 4\n	        }\n		    }\n			});\n		}\n\n		$('.slide-one-item').owlCarousel({\n	    center: false,\n	    items: 1,\n	    loop: true,\n			stagePadding: 0,\n	    margin: 0,\n	    autoplay: true,\n	    pauseOnHover: false,\n	    nav: true,\n	    navText: ['<span class=\"icon-keyboard_arrow_left\">', '<span class=\"icon-keyboard_arrow_right\">']\n	  });\n	};\n	siteCarousel();\n\n	var siteStellar = function() {\n		$(window).stellar({\n	    responsive: false,\n	    parallaxBackgrounds: true,\n	    parallaxElements: true,\n	    horizontalScrolling: false,\n	    hideDistantElements: false,\n	    scrollProperty: 'scroll'\n	  });\n	};\n	// siteStellar();\n\n	var siteCountDown = function() {\n\n		$('#date-countdown').countdown('2020/10/10', function(event) {\n		  var $this = $(this).html(event.strftime(''\n		    + '<span class=\"countdown-block\"><span class=\"label\">%w</span> weeks </span>'\n		    + '<span class=\"countdown-block\"><span class=\"label\">%d</span> days </span>'\n		    + '<span class=\"countdown-block\"><span class=\"label\">%H</span> hr </span>'\n		    + '<span class=\"countdown-block\"><span class=\"label\">%M</span> min </span>'\n		    + '<span class=\"countdown-block\"><span class=\"label\">%S</span> sec</span>'));\n		});\n				\n	};\n	siteCountDown();\n\n	var siteDatePicker = function() {\n\n		if ( $('.datepicker').length > 0 ) {\n			$('.datepicker').datepicker();\n		}\n\n	};\n	siteDatePicker();\n\n	var toggleExpand = function() {\n\n		// $('.swiper-slide-active .btn-toggle-expand').on('click', function() {\n		$('body').on('click', '.swiper-slide-active .btn-toggle-expand', function() {\n			\n			if ( $(this).hasClass('active') ) {\n				// alert('if');\n				\n				$('.swiper-slide-active .img-info-content').removeClass('active');\n\n				$(this).closest('.img-info').animate({\n						height: 60,\n						width: 60\n					}, 400);	\n\n				// setTimeout(function() {\n\n					$(this).removeClass('active');\n				\n				// });\n\n				// setTimeout(function() {\n\n					\n\n					\n\n				// }, 1500);\n\n				\n				\n			} else {\n\n				// alert('else');\n\n				$(this).addClass('active');\n\n				$(this).closest('.img-info').addClass('active')\n				$(this).closest('.img-info').animate({\n					height: 200,\n					width: 400\n				}, 400);\n\n				setTimeout(function() {\n					$('.swiper-slide-active .img-info-content').addClass('active');\n				}, 500);\n			}\n\n			\n\n			\n		}); \n\n	};\n	toggleExpand();\n\n	var swiperEvents = function() {\n\n		var galleryThumbs = new Swiper('.gallery-thumbs', {\n			slidesPerView: 10,\n      freeMode: true,\n      watchSlidesVisibility: true,\n      watchSlidesProgress: true,\n      spaceBetween: 10,\n      breakpoints: {\n        1024: {\n          slidesPerView: 10, \n        },\n        768: {\n          slidesPerView: 7, \n        },\n        640: {\n          slidesPerView: 4, \n        },\n        320: {\n          slidesPerView: 3,\n        }\n      }\n    });\n    var galleryTop = new Swiper('.gallery-top', {\n    	autoplay: true,\n    	effect: 'fade',\n      navigation: {\n        nextEl: '.swiper-button-next',\n        prevEl: '.swiper-button-prev',\n      },\n      thumbs: {\n        swiper: galleryThumbs\n      }\n    });\n\n	};\n\n	if ( $('.gallery-thumbs').length > 0 ) {\n		swiperEvents();\n	}\n\n	$('.scrollbar-inner').scrollbar();\n\n});";